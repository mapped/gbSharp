// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MapboxGeobuf
{

	/// <summary>Holder for reflection information generated from geobuf.proto</summary>
	public static partial class GeobufReflection
	{

		#region Descriptor
		/// <summary>File descriptor for geobuf.proto</summary>
		public static pbr::FileDescriptor Descriptor
		{
			get { return descriptor; }
		}
		private static pbr::FileDescriptor descriptor;

		static GeobufReflection()
		{
			byte[] descriptorData = global::System.Convert.FromBase64String(
				string.Concat(
					"CgxnZW9idWYucHJvdG8SDE1hcGJveEdlb2J1ZiLFCAoERGF0YRIMCgRrZXlz",
					"GAEgAygJEhIKCmRpbWVuc2lvbnMYAiABKA0SEQoJcHJlY2lzaW9uGAMgASgN",
					"EkIKEmZlYXR1cmVfY29sbGVjdGlvbhgEIAEoCzIkLk1hcGJveEdlb2J1Zi5E",
					"YXRhLkZlYXR1cmVDb2xsZWN0aW9uSAASLQoHZmVhdHVyZRgFIAEoCzIaLk1h",
					"cGJveEdlb2J1Zi5EYXRhLkZlYXR1cmVIABIvCghnZW9tZXRyeRgGIAEoCzIb",
					"Lk1hcGJveEdlb2J1Zi5EYXRhLkdlb21ldHJ5SAAaxAEKB0ZlYXR1cmUSLQoI",
					"Z2VvbWV0cnkYASABKAsyGy5NYXBib3hHZW9idWYuRGF0YS5HZW9tZXRyeRIM",
					"CgJpZBgLIAEoCUgAEhAKBmludF9pZBgMIAEoEkgAEigKBnZhbHVlcxgNIAMo",
					"CzIYLk1hcGJveEdlb2J1Zi5EYXRhLlZhbHVlEhYKCnByb3BlcnRpZXMYDiAD",
					"KA1CAhABEh0KEWN1c3RvbV9wcm9wZXJ0aWVzGA8gAygNQgIQAUIJCgdpZF90",
					"eXBlGtwCCghHZW9tZXRyeRIuCgR0eXBlGAEgASgOMiAuTWFwYm94R2VvYnVm",
					"LkRhdGEuR2VvbWV0cnkuVHlwZRITCgdsZW5ndGhzGAIgAygNQgIQARISCgZj",
					"b29yZHMYAyADKBJCAhABEi8KCmdlb21ldHJpZXMYBCADKAsyGy5NYXBib3hH",
					"ZW9idWYuRGF0YS5HZW9tZXRyeRIoCgZ2YWx1ZXMYDSADKAsyGC5NYXBib3hH",
					"ZW9idWYuRGF0YS5WYWx1ZRIdChFjdXN0b21fcHJvcGVydGllcxgPIAMoDUIC",
					"EAEifQoEVHlwZRIJCgVQT0lOVBAAEg4KCk1VTFRJUE9JTlQQARIOCgpMSU5F",
					"U1RSSU5HEAISEwoPTVVMVElMSU5FU1RSSU5HEAMSCwoHUE9MWUdPThAEEhAK",
					"DE1VTFRJUE9MWUdPThAFEhYKEkdFT01FVFJZQ09MTEVDVElPThAGGooBChFG",
					"ZWF0dXJlQ29sbGVjdGlvbhIsCghmZWF0dXJlcxgBIAMoCzIaLk1hcGJveEdl",
					"b2J1Zi5EYXRhLkZlYXR1cmUSKAoGdmFsdWVzGA0gAygLMhguTWFwYm94R2Vv",
					"YnVmLkRhdGEuVmFsdWUSHQoRY3VzdG9tX3Byb3BlcnRpZXMYDyADKA1CAhAB",
					"GqMBCgVWYWx1ZRIWCgxzdHJpbmdfdmFsdWUYASABKAlIABIWCgxkb3VibGVf",
					"dmFsdWUYAiABKAFIABIXCg1wb3NfaW50X3ZhbHVlGAMgASgESAASFwoNbmVn",
					"X2ludF92YWx1ZRgEIAEoBEgAEhQKCmJvb2xfdmFsdWUYBSABKAhIABIUCgpq",
					"c29uX3ZhbHVlGAYgASgJSABCDAoKdmFsdWVfdHlwZUILCglkYXRhX3R5cGVi",
					"BnByb3RvMw=="));
			descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
				new pbr::FileDescriptor[] { },
				new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
					new pbr::GeneratedClrTypeInfo(typeof(global::MapboxGeobuf.Data), global::MapboxGeobuf.Data.Parser, new[]{ "Keys", "Dimensions", "Precision", "FeatureCollection", "Feature", "Geometry" }, new[]{ "DataType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MapboxGeobuf.Data.Types.Feature), global::MapboxGeobuf.Data.Types.Feature.Parser, new[]{ "Geometry", "Id", "IntId", "Values", "Properties", "CustomProperties" }, new[]{ "IdType" }, null, null),
						new pbr::GeneratedClrTypeInfo(typeof(global::MapboxGeobuf.Data.Types.Geometry), global::MapboxGeobuf.Data.Types.Geometry.Parser, new[]{ "Type", "Lengths", "Coords", "Geometries", "Values", "CustomProperties" }, null, new[]{ typeof(global::MapboxGeobuf.Data.Types.Geometry.Types.Type) }, null),
						new pbr::GeneratedClrTypeInfo(typeof(global::MapboxGeobuf.Data.Types.FeatureCollection), global::MapboxGeobuf.Data.Types.FeatureCollection.Parser, new[]{ "Features", "Values", "CustomProperties" }, null, null, null),
						new pbr::GeneratedClrTypeInfo(typeof(global::MapboxGeobuf.Data.Types.Value), global::MapboxGeobuf.Data.Types.Value.Parser, new[]{ "StringValue", "DoubleValue", "PosIntValue", "NegIntValue", "BoolValue", "JsonValue" }, new[]{ "ValueType" }, null, null)})
				}));
		}
		#endregion

	}
	#region Messages
	public sealed partial class Data : pb::IMessage<Data>
	{
		private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public static pb::MessageParser<Data> Parser { get { return _parser; } }

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public static pbr::MessageDescriptor Descriptor
		{
			get { return global::MapboxGeobuf.GeobufReflection.Descriptor.MessageTypes[0]; }
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		pbr::MessageDescriptor pb::IMessage.Descriptor
		{
			get { return Descriptor; }
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Data()
		{
			OnConstruction();
		}

		partial void OnConstruction();

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Data(Data other) : this()
		{
			keys_ = other.keys_.Clone();
			dimensions_ = other.dimensions_;
			precision_ = other.precision_;
			switch (other.DataTypeCase)
			{
				case DataTypeOneofCase.FeatureCollection:
					FeatureCollection = other.FeatureCollection.Clone();
					break;
				case DataTypeOneofCase.Feature:
					Feature = other.Feature.Clone();
					break;
				case DataTypeOneofCase.Geometry:
					Geometry = other.Geometry.Clone();
					break;
			}

		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Data Clone()
		{
			return new Data(this);
		}

		/// <summary>Field number for the "keys" field.</summary>
		public const int KeysFieldNumber = 1;
		private static readonly pb::FieldCodec<string> _repeated_keys_codec
			= pb::FieldCodec.ForString(10);
		private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
		/// <summary>
		/// global arrays of unique keys
		/// </summary>
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public pbc::RepeatedField<string> Keys
		{
			get { return keys_; }
		}

		/// <summary>Field number for the "dimensions" field.</summary>
		public const int DimensionsFieldNumber = 2;
		private uint dimensions_;
		/// <summary>
		/// max coordinate dimensions
		/// </summary>
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public uint Dimensions
		{
			get { return dimensions_; }
			set
			{
				dimensions_ = value;
			}
		}

		/// <summary>Field number for the "precision" field.</summary>
		public const int PrecisionFieldNumber = 3;
		private uint precision_;
		/// <summary>
		/// number of digits after decimal point for coordinates
		/// </summary>
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public uint Precision
		{
			get { return precision_; }
			set
			{
				precision_ = value;
			}
		}

		/// <summary>Field number for the "feature_collection" field.</summary>
		public const int FeatureCollectionFieldNumber = 4;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public global::MapboxGeobuf.Data.Types.FeatureCollection FeatureCollection
		{
			get { return dataTypeCase_ == DataTypeOneofCase.FeatureCollection ? (global::MapboxGeobuf.Data.Types.FeatureCollection)dataType_ : null; }
			set
			{
				dataType_ = value;
				dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.FeatureCollection;
			}
		}

		/// <summary>Field number for the "feature" field.</summary>
		public const int FeatureFieldNumber = 5;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public global::MapboxGeobuf.Data.Types.Feature Feature
		{
			get { return dataTypeCase_ == DataTypeOneofCase.Feature ? (global::MapboxGeobuf.Data.Types.Feature)dataType_ : null; }
			set
			{
				dataType_ = value;
				dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.Feature;
			}
		}

		/// <summary>Field number for the "geometry" field.</summary>
		public const int GeometryFieldNumber = 6;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public global::MapboxGeobuf.Data.Types.Geometry Geometry
		{
			get { return dataTypeCase_ == DataTypeOneofCase.Geometry ? (global::MapboxGeobuf.Data.Types.Geometry)dataType_ : null; }
			set
			{
				dataType_ = value;
				dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.Geometry;
			}
		}

		private object dataType_;
		/// <summary>Enum of possible cases for the "data_type" oneof.</summary>
		public enum DataTypeOneofCase
		{
			None = 0,
			FeatureCollection = 4,
			Feature = 5,
			Geometry = 6,
		}
		private DataTypeOneofCase dataTypeCase_ = DataTypeOneofCase.None;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public DataTypeOneofCase DataTypeCase
		{
			get { return dataTypeCase_; }
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void ClearDataType()
		{
			dataTypeCase_ = DataTypeOneofCase.None;
			dataType_ = null;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override bool Equals(object other)
		{
			return Equals(other as Data);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public bool Equals(Data other)
		{
			if (ReferenceEquals(other, null))
			{
				return false;
			}
			if (ReferenceEquals(other, this))
			{
				return true;
			}
			if (!keys_.Equals(other.keys_)) return false;
			if (Dimensions != other.Dimensions) return false;
			if (Precision != other.Precision) return false;
			if (!object.Equals(FeatureCollection, other.FeatureCollection)) return false;
			if (!object.Equals(Feature, other.Feature)) return false;
			if (!object.Equals(Geometry, other.Geometry)) return false;
			if (DataTypeCase != other.DataTypeCase) return false;
			return true;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override int GetHashCode()
		{
			int hash = 1;
			hash ^= keys_.GetHashCode();
			if (Dimensions != 0) hash ^= Dimensions.GetHashCode();
			if (Precision != 0) hash ^= Precision.GetHashCode();
			if (dataTypeCase_ == DataTypeOneofCase.FeatureCollection) hash ^= FeatureCollection.GetHashCode();
			if (dataTypeCase_ == DataTypeOneofCase.Feature) hash ^= Feature.GetHashCode();
			if (dataTypeCase_ == DataTypeOneofCase.Geometry) hash ^= Geometry.GetHashCode();
			hash ^= (int)dataTypeCase_;
			return hash;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override string ToString()
		{
			return pb::JsonFormatter.ToDiagnosticString(this);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void WriteTo(pb::CodedOutputStream output)
		{
			keys_.WriteTo(output, _repeated_keys_codec);
			if (Dimensions != 0)
			{
				output.WriteRawTag(16);
				output.WriteUInt32(Dimensions);
			}
			if (Precision != 0)
			{
				output.WriteRawTag(24);
				output.WriteUInt32(Precision);
			}
			if (dataTypeCase_ == DataTypeOneofCase.FeatureCollection)
			{
				output.WriteRawTag(34);
				output.WriteMessage(FeatureCollection);
			}
			if (dataTypeCase_ == DataTypeOneofCase.Feature)
			{
				output.WriteRawTag(42);
				output.WriteMessage(Feature);
			}
			if (dataTypeCase_ == DataTypeOneofCase.Geometry)
			{
				output.WriteRawTag(50);
				output.WriteMessage(Geometry);
			}
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public int CalculateSize()
		{
			int size = 0;
			size += keys_.CalculateSize(_repeated_keys_codec);
			if (Dimensions != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dimensions);
			}
			if (Precision != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Precision);
			}
			if (dataTypeCase_ == DataTypeOneofCase.FeatureCollection)
			{
				size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureCollection);
			}
			if (dataTypeCase_ == DataTypeOneofCase.Feature)
			{
				size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feature);
			}
			if (dataTypeCase_ == DataTypeOneofCase.Geometry)
			{
				size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
			}
			return size;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void MergeFrom(Data other)
		{
			if (other == null)
			{
				return;
			}
			keys_.Add(other.keys_);
			if (other.Dimensions != 0)
			{
				Dimensions = other.Dimensions;
			}
			if (other.Precision != 0)
			{
				Precision = other.Precision;
			}
			switch (other.DataTypeCase)
			{
				case DataTypeOneofCase.FeatureCollection:
					FeatureCollection = other.FeatureCollection;
					break;
				case DataTypeOneofCase.Feature:
					Feature = other.Feature;
					break;
				case DataTypeOneofCase.Geometry:
					Geometry = other.Geometry;
					break;
			}

		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void MergeFrom(pb::CodedInputStream input)
		{
			uint tag;
			while ((tag = input.ReadTag()) != 0)
			{
				switch (tag)
				{
					default:
						input.SkipLastField();
						break;
					case 10:
					{
						keys_.AddEntriesFrom(input, _repeated_keys_codec);
						break;
					}
					case 16:
					{
						Dimensions = input.ReadUInt32();
						break;
					}
					case 24:
					{
						Precision = input.ReadUInt32();
						break;
					}
					case 34:
					{
						global::MapboxGeobuf.Data.Types.FeatureCollection subBuilder = new global::MapboxGeobuf.Data.Types.FeatureCollection();
						if (dataTypeCase_ == DataTypeOneofCase.FeatureCollection)
						{
							subBuilder.MergeFrom(FeatureCollection);
						}
						input.ReadMessage(subBuilder);
						FeatureCollection = subBuilder;
						break;
					}
					case 42:
					{
						global::MapboxGeobuf.Data.Types.Feature subBuilder = new global::MapboxGeobuf.Data.Types.Feature();
						if (dataTypeCase_ == DataTypeOneofCase.Feature)
						{
							subBuilder.MergeFrom(Feature);
						}
						input.ReadMessage(subBuilder);
						Feature = subBuilder;
						break;
					}
					case 50:
					{
						global::MapboxGeobuf.Data.Types.Geometry subBuilder = new global::MapboxGeobuf.Data.Types.Geometry();
						if (dataTypeCase_ == DataTypeOneofCase.Geometry)
						{
							subBuilder.MergeFrom(Geometry);
						}
						input.ReadMessage(subBuilder);
						Geometry = subBuilder;
						break;
					}
				}
			}
		}

		#region Nested types
		/// <summary>Container for nested types declared in the Data message type.</summary>
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public static partial class Types
		{
			public sealed partial class Feature : pb::IMessage<Feature>
			{
				private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pb::MessageParser<Feature> Parser { get { return _parser; } }

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pbr::MessageDescriptor Descriptor
				{
					get { return global::MapboxGeobuf.Data.Descriptor.NestedTypes[0]; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				pbr::MessageDescriptor pb::IMessage.Descriptor
				{
					get { return Descriptor; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Feature()
				{
					OnConstruction();
				}

				partial void OnConstruction();

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Feature(Feature other) : this()
				{
					Geometry = other.geometry_ != null ? other.Geometry.Clone() : null;
					values_ = other.values_.Clone();
					properties_ = other.properties_.Clone();
					customProperties_ = other.customProperties_.Clone();
					switch (other.IdTypeCase)
					{
						case IdTypeOneofCase.Id:
							Id = other.Id;
							break;
						case IdTypeOneofCase.IntId:
							IntId = other.IntId;
							break;
					}

				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Feature Clone()
				{
					return new Feature(this);
				}

				/// <summary>Field number for the "geometry" field.</summary>
				public const int GeometryFieldNumber = 1;
				private global::MapboxGeobuf.Data.Types.Geometry geometry_;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public global::MapboxGeobuf.Data.Types.Geometry Geometry
				{
					get { return geometry_; }
					set
					{
						geometry_ = value;
					}
				}

				/// <summary>Field number for the "id" field.</summary>
				public const int IdFieldNumber = 11;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public string Id
				{
					get { return idTypeCase_ == IdTypeOneofCase.Id ? (string)idType_ : ""; }
					set
					{
						idType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
						idTypeCase_ = IdTypeOneofCase.Id;
					}
				}

				/// <summary>Field number for the "int_id" field.</summary>
				public const int IntIdFieldNumber = 12;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public long IntId
				{
					get { return idTypeCase_ == IdTypeOneofCase.IntId ? (long)idType_ : 0L; }
					set
					{
						idType_ = value;
						idTypeCase_ = IdTypeOneofCase.IntId;
					}
				}

				/// <summary>Field number for the "values" field.</summary>
				public const int ValuesFieldNumber = 13;
				private static readonly pb::FieldCodec<global::MapboxGeobuf.Data.Types.Value> _repeated_values_codec
					= pb::FieldCodec.ForMessage(106, global::MapboxGeobuf.Data.Types.Value.Parser);
				private readonly pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> values_ = new pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value>();
				/// <summary>
				/// unique values
				/// </summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> Values
				{
					get { return values_; }
				}

				/// <summary>Field number for the "properties" field.</summary>
				public const int PropertiesFieldNumber = 14;
				private static readonly pb::FieldCodec<uint> _repeated_properties_codec
					= pb::FieldCodec.ForUInt32(114);
				private readonly pbc::RepeatedField<uint> properties_ = new pbc::RepeatedField<uint>();
				/// <summary>
				/// pairs of key/value indexes
				/// </summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<uint> Properties
				{
					get { return properties_; }
				}

				/// <summary>Field number for the "custom_properties" field.</summary>
				public const int CustomPropertiesFieldNumber = 15;
				private static readonly pb::FieldCodec<uint> _repeated_customProperties_codec
					= pb::FieldCodec.ForUInt32(122);
				private readonly pbc::RepeatedField<uint> customProperties_ = new pbc::RepeatedField<uint>();
				/// <summary>
				/// arbitrary properties
				/// </summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<uint> CustomProperties
				{
					get { return customProperties_; }
				}

				private object idType_;
				/// <summary>Enum of possible cases for the "id_type" oneof.</summary>
				public enum IdTypeOneofCase
				{
					None = 0,
					Id = 11,
					IntId = 12,
				}
				private IdTypeOneofCase idTypeCase_ = IdTypeOneofCase.None;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public IdTypeOneofCase IdTypeCase
				{
					get { return idTypeCase_; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void ClearIdType()
				{
					idTypeCase_ = IdTypeOneofCase.None;
					idType_ = null;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override bool Equals(object other)
				{
					return Equals(other as Feature);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public bool Equals(Feature other)
				{
					if (ReferenceEquals(other, null))
					{
						return false;
					}
					if (ReferenceEquals(other, this))
					{
						return true;
					}
					if (!object.Equals(Geometry, other.Geometry)) return false;
					if (Id != other.Id) return false;
					if (IntId != other.IntId) return false;
					if (!values_.Equals(other.values_)) return false;
					if (!properties_.Equals(other.properties_)) return false;
					if (!customProperties_.Equals(other.customProperties_)) return false;
					if (IdTypeCase != other.IdTypeCase) return false;
					return true;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override int GetHashCode()
				{
					int hash = 1;
					if (geometry_ != null) hash ^= Geometry.GetHashCode();
					if (idTypeCase_ == IdTypeOneofCase.Id) hash ^= Id.GetHashCode();
					if (idTypeCase_ == IdTypeOneofCase.IntId) hash ^= IntId.GetHashCode();
					hash ^= values_.GetHashCode();
					hash ^= properties_.GetHashCode();
					hash ^= customProperties_.GetHashCode();
					hash ^= (int)idTypeCase_;
					return hash;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override string ToString()
				{
					return pb::JsonFormatter.ToDiagnosticString(this);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void WriteTo(pb::CodedOutputStream output)
				{
					if (geometry_ != null)
					{
						output.WriteRawTag(10);
						output.WriteMessage(Geometry);
					}
					if (idTypeCase_ == IdTypeOneofCase.Id)
					{
						output.WriteRawTag(90);
						output.WriteString(Id);
					}
					if (idTypeCase_ == IdTypeOneofCase.IntId)
					{
						output.WriteRawTag(96);
						output.WriteSInt64(IntId);
					}
					values_.WriteTo(output, _repeated_values_codec);
					properties_.WriteTo(output, _repeated_properties_codec);
					customProperties_.WriteTo(output, _repeated_customProperties_codec);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public int CalculateSize()
				{
					int size = 0;
					if (geometry_ != null)
					{
						size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
					}
					if (idTypeCase_ == IdTypeOneofCase.Id)
					{
						size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
					}
					if (idTypeCase_ == IdTypeOneofCase.IntId)
					{
						size += 1 + pb::CodedOutputStream.ComputeSInt64Size(IntId);
					}
					size += values_.CalculateSize(_repeated_values_codec);
					size += properties_.CalculateSize(_repeated_properties_codec);
					size += customProperties_.CalculateSize(_repeated_customProperties_codec);
					return size;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(Feature other)
				{
					if (other == null)
					{
						return;
					}
					if (other.geometry_ != null)
					{
						if (geometry_ == null)
						{
							geometry_ = new global::MapboxGeobuf.Data.Types.Geometry();
						}
						Geometry.MergeFrom(other.Geometry);
					}
					values_.Add(other.values_);
					properties_.Add(other.properties_);
					customProperties_.Add(other.customProperties_);
					switch (other.IdTypeCase)
					{
						case IdTypeOneofCase.Id:
							Id = other.Id;
							break;
						case IdTypeOneofCase.IntId:
							IntId = other.IntId;
							break;
					}

				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(pb::CodedInputStream input)
				{
					uint tag;
					while ((tag = input.ReadTag()) != 0)
					{
						switch (tag)
						{
							default:
								input.SkipLastField();
								break;
							case 10:
							{
								if (geometry_ == null)
								{
									geometry_ = new global::MapboxGeobuf.Data.Types.Geometry();
								}
								input.ReadMessage(geometry_);
								break;
							}
							case 90:
							{
								Id = input.ReadString();
								break;
							}
							case 96:
							{
								IntId = input.ReadSInt64();
								break;
							}
							case 106:
							{
								values_.AddEntriesFrom(input, _repeated_values_codec);
								break;
							}
							case 114:
							case 112:
							{
								properties_.AddEntriesFrom(input, _repeated_properties_codec);
								break;
							}
							case 122:
							case 120:
							{
								customProperties_.AddEntriesFrom(input, _repeated_customProperties_codec);
								break;
							}
						}
					}
				}

			}

			public sealed partial class Geometry : pb::IMessage<Geometry>
			{
				private static readonly pb::MessageParser<Geometry> _parser = new pb::MessageParser<Geometry>(() => new Geometry());
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pb::MessageParser<Geometry> Parser { get { return _parser; } }

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pbr::MessageDescriptor Descriptor
				{
					get { return global::MapboxGeobuf.Data.Descriptor.NestedTypes[1]; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				pbr::MessageDescriptor pb::IMessage.Descriptor
				{
					get { return Descriptor; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Geometry()
				{
					OnConstruction();
				}

				partial void OnConstruction();

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Geometry(Geometry other) : this()
				{
					type_ = other.type_;
					lengths_ = other.lengths_.Clone();
					coords_ = other.coords_.Clone();
					geometries_ = other.geometries_.Clone();
					values_ = other.values_.Clone();
					customProperties_ = other.customProperties_.Clone();
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Geometry Clone()
				{
					return new Geometry(this);
				}

				/// <summary>Field number for the "type" field.</summary>
				public const int TypeFieldNumber = 1;
				private global::MapboxGeobuf.Data.Types.Geometry.Types.Type type_ = 0;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public global::MapboxGeobuf.Data.Types.Geometry.Types.Type Type
				{
					get { return type_; }
					set
					{
						type_ = value;
					}
				}

				/// <summary>Field number for the "lengths" field.</summary>
				public const int LengthsFieldNumber = 2;
				private static readonly pb::FieldCodec<uint> _repeated_lengths_codec
					= pb::FieldCodec.ForUInt32(18);
				private readonly pbc::RepeatedField<uint> lengths_ = new pbc::RepeatedField<uint>();
				/// <summary>
				/// coordinate structure in lengths
				/// </summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<uint> Lengths
				{
					get { return lengths_; }
				}

				/// <summary>Field number for the "coords" field.</summary>
				public const int CoordsFieldNumber = 3;
				private static readonly pb::FieldCodec<long> _repeated_coords_codec
					= pb::FieldCodec.ForSInt64(26);
				private readonly pbc::RepeatedField<long> coords_ = new pbc::RepeatedField<long>();
				/// <summary>
				/// delta-encoded integer values
				/// </summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<long> Coords
				{
					get { return coords_; }
				}

				/// <summary>Field number for the "geometries" field.</summary>
				public const int GeometriesFieldNumber = 4;
				private static readonly pb::FieldCodec<global::MapboxGeobuf.Data.Types.Geometry> _repeated_geometries_codec
					= pb::FieldCodec.ForMessage(34, global::MapboxGeobuf.Data.Types.Geometry.Parser);
				private readonly pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Geometry> geometries_ = new pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Geometry>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Geometry> Geometries
				{
					get { return geometries_; }
				}

				/// <summary>Field number for the "values" field.</summary>
				public const int ValuesFieldNumber = 13;
				private static readonly pb::FieldCodec<global::MapboxGeobuf.Data.Types.Value> _repeated_values_codec
					= pb::FieldCodec.ForMessage(106, global::MapboxGeobuf.Data.Types.Value.Parser);
				private readonly pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> values_ = new pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> Values
				{
					get { return values_; }
				}

				/// <summary>Field number for the "custom_properties" field.</summary>
				public const int CustomPropertiesFieldNumber = 15;
				private static readonly pb::FieldCodec<uint> _repeated_customProperties_codec
					= pb::FieldCodec.ForUInt32(122);
				private readonly pbc::RepeatedField<uint> customProperties_ = new pbc::RepeatedField<uint>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<uint> CustomProperties
				{
					get { return customProperties_; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override bool Equals(object other)
				{
					return Equals(other as Geometry);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public bool Equals(Geometry other)
				{
					if (ReferenceEquals(other, null))
					{
						return false;
					}
					if (ReferenceEquals(other, this))
					{
						return true;
					}
					if (Type != other.Type) return false;
					if (!lengths_.Equals(other.lengths_)) return false;
					if (!coords_.Equals(other.coords_)) return false;
					if (!geometries_.Equals(other.geometries_)) return false;
					if (!values_.Equals(other.values_)) return false;
					if (!customProperties_.Equals(other.customProperties_)) return false;
					return true;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override int GetHashCode()
				{
					int hash = 1;
					if (Type != 0) hash ^= Type.GetHashCode();
					hash ^= lengths_.GetHashCode();
					hash ^= coords_.GetHashCode();
					hash ^= geometries_.GetHashCode();
					hash ^= values_.GetHashCode();
					hash ^= customProperties_.GetHashCode();
					return hash;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override string ToString()
				{
					return pb::JsonFormatter.ToDiagnosticString(this);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void WriteTo(pb::CodedOutputStream output)
				{
					if (Type != 0)
					{
						output.WriteRawTag(8);
						output.WriteEnum((int)Type);
					}
					lengths_.WriteTo(output, _repeated_lengths_codec);
					coords_.WriteTo(output, _repeated_coords_codec);
					geometries_.WriteTo(output, _repeated_geometries_codec);
					values_.WriteTo(output, _repeated_values_codec);
					customProperties_.WriteTo(output, _repeated_customProperties_codec);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public int CalculateSize()
				{
					int size = 0;
					if (Type != 0)
					{
						size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
					}
					size += lengths_.CalculateSize(_repeated_lengths_codec);
					size += coords_.CalculateSize(_repeated_coords_codec);
					size += geometries_.CalculateSize(_repeated_geometries_codec);
					size += values_.CalculateSize(_repeated_values_codec);
					size += customProperties_.CalculateSize(_repeated_customProperties_codec);
					return size;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(Geometry other)
				{
					if (other == null)
					{
						return;
					}
					if (other.Type != 0)
					{
						Type = other.Type;
					}
					lengths_.Add(other.lengths_);
					coords_.Add(other.coords_);
					geometries_.Add(other.geometries_);
					values_.Add(other.values_);
					customProperties_.Add(other.customProperties_);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(pb::CodedInputStream input)
				{
					uint tag;
					while ((tag = input.ReadTag()) != 0)
					{
						switch (tag)
						{
							default:
								input.SkipLastField();
								break;
							case 8:
							{
								type_ = (global::MapboxGeobuf.Data.Types.Geometry.Types.Type)input.ReadEnum();
								break;
							}
							case 18:
							case 16:
							{
								lengths_.AddEntriesFrom(input, _repeated_lengths_codec);
								break;
							}
							case 26:
							case 24:
							{
								coords_.AddEntriesFrom(input, _repeated_coords_codec);
								break;
							}
							case 34:
							{
								geometries_.AddEntriesFrom(input, _repeated_geometries_codec);
								break;
							}
							case 106:
							{
								values_.AddEntriesFrom(input, _repeated_values_codec);
								break;
							}
							case 122:
							case 120:
							{
								customProperties_.AddEntriesFrom(input, _repeated_customProperties_codec);
								break;
							}
						}
					}
				}

				#region Nested types
				/// <summary>Container for nested types declared in the Geometry message type.</summary>
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static partial class Types
				{
					public enum Type
					{
						[pbr::OriginalName("POINT")] Point = 0,
						[pbr::OriginalName("MULTIPOINT")] Multipoint = 1,
						[pbr::OriginalName("LINESTRING")] Linestring = 2,
						[pbr::OriginalName("MULTILINESTRING")] Multilinestring = 3,
						[pbr::OriginalName("POLYGON")] Polygon = 4,
						[pbr::OriginalName("MULTIPOLYGON")] Multipolygon = 5,
						[pbr::OriginalName("GEOMETRYCOLLECTION")] Geometrycollection = 6,
					}

				}
				#endregion

			}

			public sealed partial class FeatureCollection : pb::IMessage<FeatureCollection>
			{
				private static readonly pb::MessageParser<FeatureCollection> _parser = new pb::MessageParser<FeatureCollection>(() => new FeatureCollection());
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pb::MessageParser<FeatureCollection> Parser { get { return _parser; } }

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pbr::MessageDescriptor Descriptor
				{
					get { return global::MapboxGeobuf.Data.Descriptor.NestedTypes[2]; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				pbr::MessageDescriptor pb::IMessage.Descriptor
				{
					get { return Descriptor; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public FeatureCollection()
				{
					OnConstruction();
				}

				partial void OnConstruction();

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public FeatureCollection(FeatureCollection other) : this()
				{
					features_ = other.features_.Clone();
					values_ = other.values_.Clone();
					customProperties_ = other.customProperties_.Clone();
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public FeatureCollection Clone()
				{
					return new FeatureCollection(this);
				}

				/// <summary>Field number for the "features" field.</summary>
				public const int FeaturesFieldNumber = 1;
				private static readonly pb::FieldCodec<global::MapboxGeobuf.Data.Types.Feature> _repeated_features_codec
					= pb::FieldCodec.ForMessage(10, global::MapboxGeobuf.Data.Types.Feature.Parser);
				private readonly pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Feature> features_ = new pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Feature>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Feature> Features
				{
					get { return features_; }
				}

				/// <summary>Field number for the "values" field.</summary>
				public const int ValuesFieldNumber = 13;
				private static readonly pb::FieldCodec<global::MapboxGeobuf.Data.Types.Value> _repeated_values_codec
					= pb::FieldCodec.ForMessage(106, global::MapboxGeobuf.Data.Types.Value.Parser);
				private readonly pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> values_ = new pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<global::MapboxGeobuf.Data.Types.Value> Values
				{
					get { return values_; }
				}

				/// <summary>Field number for the "custom_properties" field.</summary>
				public const int CustomPropertiesFieldNumber = 15;
				private static readonly pb::FieldCodec<uint> _repeated_customProperties_codec
					= pb::FieldCodec.ForUInt32(122);
				private readonly pbc::RepeatedField<uint> customProperties_ = new pbc::RepeatedField<uint>();
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public pbc::RepeatedField<uint> CustomProperties
				{
					get { return customProperties_; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override bool Equals(object other)
				{
					return Equals(other as FeatureCollection);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public bool Equals(FeatureCollection other)
				{
					if (ReferenceEquals(other, null))
					{
						return false;
					}
					if (ReferenceEquals(other, this))
					{
						return true;
					}
					if (!features_.Equals(other.features_)) return false;
					if (!values_.Equals(other.values_)) return false;
					if (!customProperties_.Equals(other.customProperties_)) return false;
					return true;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override int GetHashCode()
				{
					int hash = 1;
					hash ^= features_.GetHashCode();
					hash ^= values_.GetHashCode();
					hash ^= customProperties_.GetHashCode();
					return hash;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override string ToString()
				{
					return pb::JsonFormatter.ToDiagnosticString(this);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void WriteTo(pb::CodedOutputStream output)
				{
					features_.WriteTo(output, _repeated_features_codec);
					values_.WriteTo(output, _repeated_values_codec);
					customProperties_.WriteTo(output, _repeated_customProperties_codec);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public int CalculateSize()
				{
					int size = 0;
					size += features_.CalculateSize(_repeated_features_codec);
					size += values_.CalculateSize(_repeated_values_codec);
					size += customProperties_.CalculateSize(_repeated_customProperties_codec);
					return size;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(FeatureCollection other)
				{
					if (other == null)
					{
						return;
					}
					features_.Add(other.features_);
					values_.Add(other.values_);
					customProperties_.Add(other.customProperties_);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(pb::CodedInputStream input)
				{
					uint tag;
					while ((tag = input.ReadTag()) != 0)
					{
						switch (tag)
						{
							default:
								input.SkipLastField();
								break;
							case 10:
							{
								features_.AddEntriesFrom(input, _repeated_features_codec);
								break;
							}
							case 106:
							{
								values_.AddEntriesFrom(input, _repeated_values_codec);
								break;
							}
							case 122:
							case 120:
							{
								customProperties_.AddEntriesFrom(input, _repeated_customProperties_codec);
								break;
							}
						}
					}
				}

			}

			public sealed partial class Value : pb::IMessage<Value>
			{
				private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pb::MessageParser<Value> Parser { get { return _parser; } }

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public static pbr::MessageDescriptor Descriptor
				{
					get { return global::MapboxGeobuf.Data.Descriptor.NestedTypes[3]; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				pbr::MessageDescriptor pb::IMessage.Descriptor
				{
					get { return Descriptor; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Value()
				{
					OnConstruction();
				}

				partial void OnConstruction();

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Value(Value other) : this()
				{
					switch (other.ValueTypeCase)
					{
						case ValueTypeOneofCase.StringValue:
							StringValue = other.StringValue;
							break;
						case ValueTypeOneofCase.DoubleValue:
							DoubleValue = other.DoubleValue;
							break;
						case ValueTypeOneofCase.PosIntValue:
							PosIntValue = other.PosIntValue;
							break;
						case ValueTypeOneofCase.NegIntValue:
							NegIntValue = other.NegIntValue;
							break;
						case ValueTypeOneofCase.BoolValue:
							BoolValue = other.BoolValue;
							break;
						case ValueTypeOneofCase.JsonValue:
							JsonValue = other.JsonValue;
							break;
					}

				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public Value Clone()
				{
					return new Value(this);
				}

				/// <summary>Field number for the "string_value" field.</summary>
				public const int StringValueFieldNumber = 1;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public string StringValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.StringValue ? (string)valueType_ : ""; }
					set
					{
						valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
						valueTypeCase_ = ValueTypeOneofCase.StringValue;
					}
				}

				/// <summary>Field number for the "double_value" field.</summary>
				public const int DoubleValueFieldNumber = 2;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public double DoubleValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.DoubleValue ? (double)valueType_ : 0D; }
					set
					{
						valueType_ = value;
						valueTypeCase_ = ValueTypeOneofCase.DoubleValue;
					}
				}

				/// <summary>Field number for the "pos_int_value" field.</summary>
				public const int PosIntValueFieldNumber = 3;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public ulong PosIntValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.PosIntValue ? (ulong)valueType_ : 0UL; }
					set
					{
						valueType_ = value;
						valueTypeCase_ = ValueTypeOneofCase.PosIntValue;
					}
				}

				/// <summary>Field number for the "neg_int_value" field.</summary>
				public const int NegIntValueFieldNumber = 4;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public ulong NegIntValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.NegIntValue ? (ulong)valueType_ : 0UL; }
					set
					{
						valueType_ = value;
						valueTypeCase_ = ValueTypeOneofCase.NegIntValue;
					}
				}

				/// <summary>Field number for the "bool_value" field.</summary>
				public const int BoolValueFieldNumber = 5;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public bool BoolValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.BoolValue ? (bool)valueType_ : false; }
					set
					{
						valueType_ = value;
						valueTypeCase_ = ValueTypeOneofCase.BoolValue;
					}
				}

				/// <summary>Field number for the "json_value" field.</summary>
				public const int JsonValueFieldNumber = 6;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public string JsonValue
				{
					get { return valueTypeCase_ == ValueTypeOneofCase.JsonValue ? (string)valueType_ : ""; }
					set
					{
						valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
						valueTypeCase_ = ValueTypeOneofCase.JsonValue;
					}
				}

				private object valueType_;
				/// <summary>Enum of possible cases for the "value_type" oneof.</summary>
				public enum ValueTypeOneofCase
				{
					None = 0,
					StringValue = 1,
					DoubleValue = 2,
					PosIntValue = 3,
					NegIntValue = 4,
					BoolValue = 5,
					JsonValue = 6,
				}
				private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public ValueTypeOneofCase ValueTypeCase
				{
					get { return valueTypeCase_; }
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void ClearValueType()
				{
					valueTypeCase_ = ValueTypeOneofCase.None;
					valueType_ = null;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override bool Equals(object other)
				{
					return Equals(other as Value);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public bool Equals(Value other)
				{
					if (ReferenceEquals(other, null))
					{
						return false;
					}
					if (ReferenceEquals(other, this))
					{
						return true;
					}
					if (StringValue != other.StringValue) return false;
					if (DoubleValue != other.DoubleValue) return false;
					if (PosIntValue != other.PosIntValue) return false;
					if (NegIntValue != other.NegIntValue) return false;
					if (BoolValue != other.BoolValue) return false;
					if (JsonValue != other.JsonValue) return false;
					if (ValueTypeCase != other.ValueTypeCase) return false;
					return true;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override int GetHashCode()
				{
					int hash = 1;
					if (valueTypeCase_ == ValueTypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
					if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
					if (valueTypeCase_ == ValueTypeOneofCase.PosIntValue) hash ^= PosIntValue.GetHashCode();
					if (valueTypeCase_ == ValueTypeOneofCase.NegIntValue) hash ^= NegIntValue.GetHashCode();
					if (valueTypeCase_ == ValueTypeOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
					if (valueTypeCase_ == ValueTypeOneofCase.JsonValue) hash ^= JsonValue.GetHashCode();
					hash ^= (int)valueTypeCase_;
					return hash;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public override string ToString()
				{
					return pb::JsonFormatter.ToDiagnosticString(this);
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void WriteTo(pb::CodedOutputStream output)
				{
					if (valueTypeCase_ == ValueTypeOneofCase.StringValue)
					{
						output.WriteRawTag(10);
						output.WriteString(StringValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue)
					{
						output.WriteRawTag(17);
						output.WriteDouble(DoubleValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.PosIntValue)
					{
						output.WriteRawTag(24);
						output.WriteUInt64(PosIntValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.NegIntValue)
					{
						output.WriteRawTag(32);
						output.WriteUInt64(NegIntValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.BoolValue)
					{
						output.WriteRawTag(40);
						output.WriteBool(BoolValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.JsonValue)
					{
						output.WriteRawTag(50);
						output.WriteString(JsonValue);
					}
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public int CalculateSize()
				{
					int size = 0;
					if (valueTypeCase_ == ValueTypeOneofCase.StringValue)
					{
						size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue)
					{
						size += 1 + 8;
					}
					if (valueTypeCase_ == ValueTypeOneofCase.PosIntValue)
					{
						size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PosIntValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.NegIntValue)
					{
						size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NegIntValue);
					}
					if (valueTypeCase_ == ValueTypeOneofCase.BoolValue)
					{
						size += 1 + 1;
					}
					if (valueTypeCase_ == ValueTypeOneofCase.JsonValue)
					{
						size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonValue);
					}
					return size;
				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(Value other)
				{
					if (other == null)
					{
						return;
					}
					switch (other.ValueTypeCase)
					{
						case ValueTypeOneofCase.StringValue:
							StringValue = other.StringValue;
							break;
						case ValueTypeOneofCase.DoubleValue:
							DoubleValue = other.DoubleValue;
							break;
						case ValueTypeOneofCase.PosIntValue:
							PosIntValue = other.PosIntValue;
							break;
						case ValueTypeOneofCase.NegIntValue:
							NegIntValue = other.NegIntValue;
							break;
						case ValueTypeOneofCase.BoolValue:
							BoolValue = other.BoolValue;
							break;
						case ValueTypeOneofCase.JsonValue:
							JsonValue = other.JsonValue;
							break;
					}

				}

				[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
				public void MergeFrom(pb::CodedInputStream input)
				{
					uint tag;
					while ((tag = input.ReadTag()) != 0)
					{
						switch (tag)
						{
							default:
								input.SkipLastField();
								break;
							case 10:
							{
								StringValue = input.ReadString();
								break;
							}
							case 17:
							{
								DoubleValue = input.ReadDouble();
								break;
							}
							case 24:
							{
								PosIntValue = input.ReadUInt64();
								break;
							}
							case 32:
							{
								NegIntValue = input.ReadUInt64();
								break;
							}
							case 40:
							{
								BoolValue = input.ReadBool();
								break;
							}
							case 50:
							{
								JsonValue = input.ReadString();
								break;
							}
						}
					}
				}

			}

		}
		#endregion

	}

	#endregion

}

#endregion Designer generated code
